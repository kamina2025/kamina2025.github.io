{"mappings":"ACGA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAAM,EAAkB,SAAS,cAAc,CAAC,mBAC1C,EAAiB,SAAS,cAAc,CAAC,kBACzC,EAAY,SAAS,cAAc,CAAC,UAGpC,EAAS,IAAI,WAEnB,EAAe,gBAAgB,CAAC,QAAS,KACrC,IAAM,EAAY,EAAgB,KAAK,CAAC,IAAI,GAE5C,GAAI,CAAC,EAAW,CACZ,EAAU,SAAS,CAAG,uEACtB,MACJ,CAEA,EAAU,SAAS,CAAG,4CAEtB,EAAO,GAAG,CAAC,EAAW,AAAC,IACnB,EAAU,SAAS,CAAG,uBAAyB,EAAQ,IAAI,CAAG,OAC9D,QAAQ,GAAG,CAAC,uCAAwC,EAAQ,IAAI,EAEhE,EAAQ,EAAE,CAAC,WAAY,KACnB,IAAM,EAAY,AAAA,CAAA,AAAmB,IAAnB,EAAQ,QAAQ,AAAG,EAAK,OAAO,CAAC,EAClD,CAAA,EAAU,SAAS,CAAG,CAAC,gBAAgB,EAAE,EAAQ,IAAI,CAAC,EAAE,EAAE,EAAS,gBAAgB,EAAE,YAAY,EAAQ,aAAa,EAAE,YAAY,EAAE,EAAQ,QAAQ,CAAC,IAAI,CAAC,AAChK,GAEA,EAAQ,EAAE,CAAC,OAAQ,KACf,EAAU,SAAS,EAAI,oDACvB,QAAQ,GAAG,CAAC,+BAChB,GAEA,EAAQ,KAAK,CAAC,OAAO,CAAC,AAAC,IACnB,GAAI,EAAK,IAAI,CAAC,QAAQ,CAAC,SAAW,EAAK,IAAI,CAAC,QAAQ,CAAC,UAAY,EAAK,IAAI,CAAC,QAAQ,CAAC,QAAS,CACzF,IAAM,EAAe,SAAS,aAAa,CAAC,QAC5C,CAAA,EAAa,QAAQ,CAAG,CAAA,EACxB,EAAa,QAAQ,CAAG,CAAA,EACxB,EAAa,KAAK,CAAC,QAAQ,CAAG,OAC9B,EAAa,KAAK,CAAC,OAAO,CAAG,QAC7B,EAAa,KAAK,CAAC,SAAS,CAAG,OAE/B,EAAU,WAAW,CAAC,GACtB,EAAK,QAAQ,CAAC,GACd,EAAU,SAAS,EAAI,CAAC,kBAAkB,EAAE,EAAK,IAAI,CAAC,IAAI,CAAC,AAC/D,KAAO,CACH,IAAM,EAAW,SAAS,aAAa,CAAC,IACxC,CAAA,EAAS,IAAI,CAAG,IAChB,EAAS,WAAW,CAAG,CAAC,WAAW,EAAE,EAAK,IAAI,CAAA,CAAE,CAChD,EAAS,KAAK,CAAC,OAAO,CAAG,QACzB,EAAS,KAAK,CAAC,SAAS,CAAG,OAC3B,EAAS,OAAO,CAAG,AAAC,IAChB,EAAE,cAAc,GAChB,EAAK,UAAU,CAAC,CAAC,EAAK,KAClB,GAAI,EAAK,OAAO,QAAQ,KAAK,CAAC,GAC9B,IAAM,EAAe,SAAS,aAAa,CAAC,IAC5C,CAAA,EAAa,IAAI,CAAG,EACpB,EAAa,QAAQ,CAAG,EAAK,IAAI,CACjC,EAAa,KAAK,EACtB,EACJ,EACA,EAAU,WAAW,CAAC,EAC1B,CACJ,EACJ,GAEA,EAAO,EAAE,CAAC,QAAS,AAAC,IAChB,QAAQ,KAAK,CAAC,oBAAqB,EAAI,OAAO,EAC9C,EAAU,SAAS,CAAG,CAAC,4CAA4C,EAAE,EAAI,OAAO,CAAC,IAAI,CAAC,AAC1F,EACJ,EACJ,GAEA,SAAS,YAAY,CAAK,CAAE,EAAW,CAAC,EACpC,GAAI,AAAU,IAAV,EAAa,MAAO,UAIxB,IAAM,EAAI,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC,GAAS,KAAK,GAAG,CAHrC,OAIV,OAAO,WAAW,AAAC,CAAA,EAAQ,KAAK,GAAG,CAJzB,KAI6B,EAAA,EAAI,OAAO,CAHvC,EAAW,EAAI,EAAI,IAG4B,IAAM,AAFlD,CAAC,QAAS,KAAM,KAAM,KAAM,KAAK,AAEsB,CAAC,EAAE,AAC5E","sources":["<anon>","js/main.js"],"sourcesContent":["// ¡Esta línea es la que DEBE ELIMINARSE!\n// import WebTorrent from 'webtorrent'; \ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const magnetLinkInput = document.getElementById('magnetLinkInput');\n    const downloadButton = document.getElementById('downloadButton');\n    const outputDiv = document.getElementById('output');\n    // La variable WebTorrent ahora está disponible porque la cargaste desde el CDN en el HTML\n    const client = new WebTorrent();\n    downloadButton.addEventListener('click', ()=>{\n        const magnetURI = magnetLinkInput.value.trim();\n        if (!magnetURI) {\n            outputDiv.innerHTML = '<p style=\"color: red;\">Por favor, ingresa un Magnet Link v\\xe1lido.</p>';\n            return;\n        }\n        outputDiv.innerHTML = \"<p>Iniciando descarga/reproducci\\xf3n...</p>\";\n        client.add(magnetURI, (torrent)=>{\n            outputDiv.innerHTML = \"<p>Torrent a\\xf1adido: \" + torrent.name + '</p>';\n            console.log(\"Cliente WebTorrent est\\xe1 descargando:\", torrent.name);\n            torrent.on('download', ()=>{\n                const progress = (torrent.progress * 100).toFixed(1);\n                outputDiv.innerHTML = `<p>Descargando: ${torrent.name} (${progress}%) - Velocidad: ${formatBytes(torrent.downloadSpeed)}/s - Pares: ${torrent.numPeers}</p>`;\n            });\n            torrent.on('done', ()=>{\n                outputDiv.innerHTML += '<p style=\"color: green;\">Descarga completada!</p>';\n                console.log('Torrent descarga completada!');\n            });\n            torrent.files.forEach((file)=>{\n                if (file.name.endsWith('.mp4') || file.name.endsWith('.webm') || file.name.endsWith('.ogg')) {\n                    const videoElement = document.createElement('video');\n                    videoElement.controls = true;\n                    videoElement.autoplay = true;\n                    videoElement.style.maxWidth = '100%';\n                    videoElement.style.display = 'block';\n                    videoElement.style.marginTop = '15px';\n                    outputDiv.appendChild(videoElement);\n                    file.renderTo(videoElement);\n                    outputDiv.innerHTML += `<p>Reproduciendo: ${file.name}</p>`;\n                } else {\n                    const fileLink = document.createElement('a');\n                    fileLink.href = '#';\n                    fileLink.textContent = `Descargar: ${file.name}`;\n                    fileLink.style.display = 'block';\n                    fileLink.style.marginTop = '10px';\n                    fileLink.onclick = (e)=>{\n                        e.preventDefault();\n                        file.getBlobURL((err, url)=>{\n                            if (err) return console.error(err);\n                            const downloadLink = document.createElement('a');\n                            downloadLink.href = url;\n                            downloadLink.download = file.name;\n                            downloadLink.click();\n                        });\n                    };\n                    outputDiv.appendChild(fileLink);\n                }\n            });\n        });\n        client.on('error', (err)=>{\n            console.error('WebTorrent Error:', err.message);\n            outputDiv.innerHTML = `<p style=\"color: red;\">Error en WebTorrent: ${err.message}</p>`;\n        });\n    });\n});\nfunction formatBytes(bytes, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = [\n        'Bytes',\n        'KB',\n        'MB',\n        'GB',\n        'TB'\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n//# sourceMappingURL=kamina2025.github.io.a2e3f2e1.js.map\n","// ¡Esta línea es la que DEBE ELIMINARSE!\r\n// import WebTorrent from 'webtorrent'; \r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const magnetLinkInput = document.getElementById('magnetLinkInput');\r\n    const downloadButton = document.getElementById('downloadButton');\r\n    const outputDiv = document.getElementById('output');\r\n\r\n    // La variable WebTorrent ahora está disponible porque la cargaste desde el CDN en el HTML\r\n    const client = new WebTorrent(); \r\n\r\n    downloadButton.addEventListener('click', () => {\r\n        const magnetURI = magnetLinkInput.value.trim();\r\n\r\n        if (!magnetURI) {\r\n            outputDiv.innerHTML = '<p style=\"color: red;\">Por favor, ingresa un Magnet Link válido.</p>';\r\n            return;\r\n        }\r\n\r\n        outputDiv.innerHTML = '<p>Iniciando descarga/reproducción...</p>';\r\n\r\n        client.add(magnetURI, (torrent) => {\r\n            outputDiv.innerHTML = '<p>Torrent añadido: ' + torrent.name + '</p>';\r\n            console.log('Cliente WebTorrent está descargando:', torrent.name);\r\n\r\n            torrent.on('download', () => {\r\n                const progress = (torrent.progress * 100).toFixed(1);\r\n                outputDiv.innerHTML = `<p>Descargando: ${torrent.name} (${progress}%) - Velocidad: ${formatBytes(torrent.downloadSpeed)}/s - Pares: ${torrent.numPeers}</p>`;\r\n            });\r\n\r\n            torrent.on('done', () => {\r\n                outputDiv.innerHTML += '<p style=\"color: green;\">Descarga completada!</p>';\r\n                console.log('Torrent descarga completada!');\r\n            });\r\n\r\n            torrent.files.forEach((file) => {\r\n                if (file.name.endsWith('.mp4') || file.name.endsWith('.webm') || file.name.endsWith('.ogg')) {\r\n                    const videoElement = document.createElement('video');\r\n                    videoElement.controls = true;\r\n                    videoElement.autoplay = true;\r\n                    videoElement.style.maxWidth = '100%';\r\n                    videoElement.style.display = 'block';\r\n                    videoElement.style.marginTop = '15px';\r\n\r\n                    outputDiv.appendChild(videoElement);\r\n                    file.renderTo(videoElement);\r\n                    outputDiv.innerHTML += `<p>Reproduciendo: ${file.name}</p>`;\r\n                } else {\r\n                    const fileLink = document.createElement('a');\r\n                    fileLink.href = '#';\r\n                    fileLink.textContent = `Descargar: ${file.name}`;\r\n                    fileLink.style.display = 'block';\r\n                    fileLink.style.marginTop = '10px';\r\n                    fileLink.onclick = (e) => {\r\n                        e.preventDefault();\r\n                        file.getBlobURL((err, url) => {\r\n                            if (err) return console.error(err);\r\n                            const downloadLink = document.createElement('a');\r\n                            downloadLink.href = url;\r\n                            downloadLink.download = file.name;\r\n                            downloadLink.click();\r\n                        });\r\n                    };\r\n                    outputDiv.appendChild(fileLink);\r\n                }\r\n            });\r\n        });\r\n\r\n        client.on('error', (err) => {\r\n            console.error('WebTorrent Error:', err.message);\r\n            outputDiv.innerHTML = `<p style=\"color: red;\">Error en WebTorrent: ${err.message}</p>`;\r\n        });\r\n    });\r\n});\r\n\r\nfunction formatBytes(bytes, decimals = 2) {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n}"],"names":["document","addEventListener","magnetLinkInput","getElementById","downloadButton","outputDiv","client","WebTorrent","magnetURI","value","trim","innerHTML","add","torrent","name","console","log","on","progress","toFixed","formatBytes","downloadSpeed","numPeers","files","forEach","file","endsWith","videoElement","createElement","controls","autoplay","style","maxWidth","display","marginTop","appendChild","renderTo","fileLink","href","textContent","onclick","e","preventDefault","getBlobURL","err","url","error","downloadLink","download","click","message","bytes","decimals","i","Math","floor","parseFloat","pow","sizes"],"version":3,"file":"kamina2025.github.io.a2e3f2e1.js.map"}